#!/usr/bin/bash
#
#  Copyright (c) 2017, MariaDB
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */


LOGDIR=$1
res=0

#echo "Test for IP/FTP situation"
#for i in 1 2 3 4 5 ; do
#  curl http://hasky.askmonty.org/PID=$$ > /dev/null
#done

for triallog in `ls -tr $LOGDIR/trial*.log`
do
  if ! [ -e $triallog ] ; then
    echo "$triallog does not exist"
    continue
  fi

  trial=`echo $triallog | sed -e 's/.*trial\([0-9]*\).*/\1/'`
  status=`grep 'will exit with exit status' $triallog | sed -e 's/.*will exit with exit status STATUS_\([A-Z_]*\).*/\1/'`
  cmd=`grep -A 1 'Final command line:' $triallog`

  echo "=================== Trial $trial ==================="
  echo
  echo "Status: $status"
  echo
  
  if [[ "$status" == "OK" ]] ; then
    continue
  fi
  
  perl $HOME/mariadb-tests/scripts/check_for_known_bugs.pl $LOGDIR/vardir*_$trial/mysql.err $LOGDIR/trial${trial}.log

  echo
  echo $cmd
  echo
  
  res=1

  for dname in $LOGDIR/vardir*_$trial $LOGDIR/vardir*_${trial}_*
  do
    # Quoting bootstrap log all existing error logs
    for fname in $dname/mysql.err_orig* $dname/mysql.err $dname/boot.log
    do
      if [ -e $fname ] ; then
        echo "------------------- $fname -----------------------------"
        echo
        cat $fname | grep -v "\[Note\]" | grep -v "^$" | cut -c 1-4096
        echo "-------------------"
      fi
    done

    # Checking for coredump in the _orig datadir
    if [ -e $dname/data_orig/core ] ; then
      coredump=$dname/data_orig/core
      # Since it's in the _orig dir, it is definitely from the old server
      bname=$HOME/old
      if [ -e $bname/bin/mysqld ] ; then
        binary=$bname/bin/mysqld
      elif [ -e $bname/sql/mysqld ] ; then
        binary=$bname/sql/mysqld
      fi
      echo
      echo "------------------- $coredump --------------------------"
      echo "------------------- Generated by $binary"
      echo
      gdb --batch --eval-command="thread apply all bt" $binary $coredump
      echo
      echo "-------------------"
      echo
    fi

    # Checking for coredump in the datadir
    if [ -e $dname/data/core ] ; then
      coredump=$dname/data/core
      
      # It can be both from the old and the new server, depending on
      # whether it is an upgrade test, and if it is, on when
      # the test failed. If there is also 'data_orig', then 'data'
      # belongs to the new server; if there is no 'data_orig' and 'old'
      # server exists, then it's an upgrade test and the core belongs to
      # the old server; otherwise it belongs to the new server
      
      if [ -e $dname/data_orig ] ; then
        bname=$BASEDIR
      elif [ -e $HOME/old ] ; then
        bname=$HOME/old
      else
        bname=$BASEDIR
      fi
      
      if [ -e $bname/bin/mysqld ] ; then
        binary=$bname/bin/mysqld
      elif [ -e $bname/sql/mysqld ] ; then
        binary=$bname/sql/mysqld
      fi

      echo
      echo "------------------- $coredump --------------------------"
      echo "------------------- Generated by $binary"
      echo
      gdb --batch --eval-command="thread apply all bt" $binary $coredump
      echo
      echo "-------------------"
      echo

      cp $binary $dname/
    fi
#    tarname="var-${TRAVIS_JOB_NUMBER}-${trial}".`date "+%s"`.tar.gz
##    tar zcf $tarname $dname
#    tar zcf $tarname $dname/mysql.log
#    echo "-------------------"
#    echo "Uploading $tarname to FTP"
#    set -o pipefail
#    ls -l $tarname
#    echo "user anonymous foo" > ftp_vardir
#    echo "put $tarname private/travis/$tarname" >> ftp_vardir
#    for i in 1 2 3 ; do
#      echo "Attempt $i..."
#      cat ftp_vardir | ftp -vnip ftp.askmonty.org
#      if [ "$?" == "0" ] ; then
#        echo "   succeeded."
#        break
#      else
#        echo "   failed."
#      fi
#    done
#    echo "-------------------"
#    rm $tarname
  done
done

function soft_exit {
  return $res
}

soft_exit
